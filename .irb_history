User.all
Requests.all
Request.all
User.first
User.all
User.all
User.last
p = User.last
p.manager
p.avatar
p
p.manager
p.avatar
User.first
User.all
t= User.find(3)
t
t.avatar
t.@name
t.avatar
t= User.find(3)
t.avatar
t.avatar.url
t.avatar
t.avatar.attachment
Rails.application.routes.url_helpers.rails_blob_path(user.avatar, only_path: true)
Rails.application.routes.url_helpers.rails_blob_path(t.avatar, only_path: true)
user = User.first
user.avatar
user.avatar.url
url_for(user.avatar)
Rails.application.routes.url_helpers.rails_blob_path(user.avatar, only_path: true)
Rails.application.routes.url_helpers.url_for(user.avatar, only_path: true)
Rails.application.routes.url_helpers.url_for(user.avatar)
user.as_json
user.as_json.merge({\
          # avatar:Rails.application.routes.url_helpers.rails_blob_path(user.avatar, only_path: true)\
          avatar: url_for(user.avatar)\
        })
user.as_json.merge({ avatar: url_for( user.avatar) })
user.as_json.merge({ avatar: Rails.application.routes.url_helpers.url_for( user.avatar) })
exit
Rails.application.credentials.cloudinary.development.api_key
Rails.application.credentials
Rails.application.credentials[:cloudinary]
Rails.application.credentials[:cloudinary][:development][:api_key]
User.first
User.first.avatar
User.last.avatar
User.find_by(name: "toby flenderson")
User.find_by(name: "toby flenderson").avatar
User.find_by(name: "toby flenderson").avatar.attachment
User.find_by(name: "toby flenderson").avatar.attachment?
User.find_by(name: "toby flenderson").avatar.attached?
User.all.map{ |user| user.avatar.attached? }
User.all.map{ |user| user.name user.avatar.attached? }
User.all.map{ |user| "#{user.name} - #{user.avatar.attached?}" }
User.all.map{ |user| "#{user.name} - #{user.avatar.attached?}" }
User.all.map{ |user| "#{user.name} - #{user.avatar.attached?}" }
User.all.map{ |user| "#{user.name} - #{user.avatar.attached?}" }
User.all.map{ |user| "#{user.name} - #{user.avatar.attached?}" }
User.all.map{ |user| "#{user.name}; #{user.name.manager} - #{user.avatar.attached?}" }
User.all.map{ |user| "#{user.name}; #{user.manager} - #{user.avatar.attached?}" }
User.all.map{ |user| "#{user.name}; #{user.manager.name} - #{user.avatar.attached?}" }
User.all.map{ |user| "#{user.name}; #{user.manager} - #{user.avatar.attached?}" }
o = User.first
o.manager
l = User.last
l.manager
l.avatar
l.avatar.name
l.avatar.url
m = User.first
m.employees
u = User.find(2)
User.all
User.find_by(department:"Human Resources").first
User.find_by(department:"Human Resources")
User.find_by(department:"Human Resources")
User.create(name: "michael scott", role:"regional manager", department: "Management", paid_time_off: 122, salary: 92500, experience: 8, is_admin: true, email: "mscott@dm.com", password:"office")
User.save
User.all
User.all
User.save
User.all.save
user. all
User.all
Rails.application.routes.url_helpers.url_for( User.first.avatar)
User.all.to_json
User.all
Rails.application.credentials
Rails.application.credentials.cloudinary_api_key
Rails.application.credentials.development
ENV
ENV['GITHUB_ID']
ENV['GITHUB_ID']
ENV['GITHUB_ID']
ENV
ENV['GITHUB_ID']
ENV
ENV['GITHUB_ID']
ENV['GITHUB_ID']
ENV['GITHUB_ID']
ENV['GITHUB_ID']
ENV
rails.environment
Rails.environment
ENV['RAILS_ENV']
ENV['CLOUDINARY_API_KEY']
ENV['CLOUDINARY_API_KEY']
ENV['RAILS_ENV']
Dotenv.parse(".env.local", ".env")
Dotenv.parse(".env.test", ".env")
Dotenv.parse(".env.test")
Dotenv.parse(".env.development")
Dotenv.parse(".env.development.local")
Dotenv.parse(".env.development.local")Dotenv
Dotenv
Dotenv.parse(".env.development.local")
ENV['RAILS_ENV']
ENV['CLOUDINARY_API_KEY']
ENV['GITHUB_ID']
ENV['GITHUB_ID']
ENV['CLOUDINARY_API_KEY']
ENV['CLOUDINARY_API_KEY']
ENV['CLOUDINARY_API_SECRET']
User.first
User.first.salary
User.first
rs
FactoryBot.create(:user)
FactoryBot.create(:users)
FactoryBot.create(:user\
)
FactoryBot.create(:user)
FactoryBot.create(:users)
FactoryBot.create(:users)
FactoryBot.reload
FactoryBot.reload
FactoryBot.create(:user)
FactoryBot.create(:user)\\
\
end
FactoryBot.create(:user)
FactoryBot.build(:user)

FactoryBot.build(:user)
FactoryBot.build(:user)
FactoryBot.build(:user)
FactoryBot.build(:user)
FactoryBot.create(:user)
User.first
User.first.salary
User.first
FactoryBot.create(:user)
FactoryBot.create(:salary)
FactoryBot.create(:user)
FactoryBot.create(:salary)
FactoryBot.create(:user)
user = _
FactoryBot.create(:user)
FactoryBot.create(:user)
User.first
Faker::Name.name
FactoryBot.create(:user)
%w(previous active pending)
FactoryBot.create(:salary, user: User.first)
FactoryBot.create(:salary, user: User.first)
Salary
Salary
%w[previous active pending]
%i[previous active pending]
Salary
%i(previous active pending)
Salary
Salary
Salary
Salary
Salary.statuses
# == Schema Information
#
# Table name: salaries
#
#  id           :bigint           not null, primary key
#  base_amount  :integer
#  bonus_amount :integer
#  status       :integer          default(0)
#  created_at   :datetime         not null
#  updated_at   :datetime         not null
#  user_id      :bigint           not null
#
# Indexes
#
#  index_salaries_on_user_id  (user_id)
#
class Salary < ApplicationRecord\
  enum :status, [ :draft, :published, :archived, :trashed ]\
\
  belongs_to :user\
end
Salary
Salary
Salary.statuses
FactoryBot.create(:salary)
FactoryBot.create(:salary, user: User.first)
User.first
User.first.salary
User.first.salaries
reload!
User.first.salaries
User.first.current_salary
User.first.current_salary
User.first
User.first.salaries
alary.statuses[:active]
Salary.statuses[:active]
User.first.current_salary
FactoryBot.create(:salary, user: User.first, status: :active)
User.first.current_salary
